function visualizePSFsAtWavelengthsHelper(theCustomPSFOptics, ...
        targetWavelengths, domainVisualizationLimits, domainVisualizationTicks)

    subplotPosVectors = NicePlot.getSubPlotPosVectors(...
       'rowsNum', 1, ...
       'colsNum', 4, ...
       'heightMargin',  0.0, ...
       'widthMargin',    0.05, ...
       'leftMargin',     0.05, ...
       'rightMargin',    0.00, ...
       'bottomMargin',   0.05, ...
       'topMargin',      0.00);

    wavelengthSupport = oiGet(theCustomPSFOptics, 'wave');
    hFig = figure(2);
    clf;
    set(hFig, 'Position', [10 10 1650 500], 'Color', [1 1 1]);

    
    for k = 1:numel(targetWavelengths)
        [~,wIndex] = min(abs(wavelengthSupport-targetWavelengths(k)));
        targetWavelength = wavelengthSupport(wIndex);
    
        psfRangeArcMin = max(domainVisualizationLimits)*60*0.5;
        ax = subplot('Position', subplotPosVectors(1,k).v);
        visualizePSF(theCustomPSFOptics, targetWavelength, psfRangeArcMin, ...
            'contourLevels', 0.1:0.1:0.9, ...
            'axesHandle', ax, ...
            'figureTitle', sprintf('%2.0f nm', targetWavelength), ...
            'fontSize', 16);
        set(ax, 'XTick', domainVisualizationTicks.x*60, 'YTick', domainVisualizationTicks.y*60, ...
                'XTickLabel', sprintf('%2.2f\n', domainVisualizationTicks.x), ...
                'YTickLabel', sprintf('%2.2f\n', domainVisualizationTicks.y));
        set(ax, 'XLim', domainVisualizationLimits(1:2)*60, 'YLim', domainVisualizationLimits(3:4)*60);
        xlabel('space (deg)');
        if (k == 1)
            ylabel('space (deg)');
        end
        drawnow
    end

    projectBaseDir = ISETBioJandJRootPath();
    pdfFile = [fullfile(projectBaseDir, 'figures') filesep 'PSFs.pdf'];
    NicePlot.exportFigToPDF(pdfFile,hFig, 300);
end
